pub fn main() {
    // 生命周期也是泛型
    // 生命周期与引用有效性

//    生命周期注解并不改变任何引用的生命周期的长短。与当函数签名中指定了泛型类型参数后就可以接受任何类型一样，当指定了泛型生命周期后函数也能接受任何生命周期的引用。生命周期注解描述了多个引用生命周期相互的关系，而不影响其生命周期。
}

//'a 就是 生命周期的泛型，仅仅描述多个生命周期的关系，而不影响生命周期
// 单个生命周期没有意义，多个引用的生命周期大小才有意义
// 仅仅编译期检查，不满足生命周期的参数传入不会通过编译
fn longest<'a>(x: &'a str, y: &'a str) -> &'a str {
    if x.len() > y.len() {
        x
    } else {
        y
    }
}


// 下面不能编译。  函数返回生命周期，但是函数内部创建的值，会在函数结束时离开作用域，变成了垂悬引用
// 返回生命周期参数需要与其中一个参数的生命周期匹配
// 像如下的情况，应该返回 所有权类型，而不是返回引用类型。 返回的值的所有权由调用者负责清理（作用域结束自动清理）
//fn longest22<'a>(x: &str, y: &str) -> &'a str {
//    let result = String::from("really long string");
//    result.as_str()
//}

